반드시 정렬된 상태여만 한다. => 이진 탐색을 사용하기 때문

Lower Bound : 찾고자 하는 값이 가장 처음으로 나오는 위치

Upper Bound : 찾고자 하는 값보다 큰 값



[My Code]

def lower_bound(array, left, right, value):
    mid = (left + right) // 2

    if left >= right:
        return left

    if array[mid] > value:
        return lower_bound(array, left, mid - 1, value)
    elif array[mid] < value:
        return lower_bound(array, mid + 1, right, value)
    else:
        if mid == right:
            return mid
        return lower_bound(array, left, mid, value)


def upper_bound(array, left, right, value):
    mid = (left + right) // 2

    if left >= right:
        return left

    if array[mid] > value:
        return upper_bound(array, left, mid - 1, value)
    elif array[mid] < value:
        return upper_bound(array, mid + 1, right, value)
    else:
        if mid == left:
            return mid + 1
        return upper_bound(array, mid, right, value)



# Example Code

print('array 1 : 2, 2')
array_1 = [1, 2, 4, 5, 6, 7, 8, 9]

print(lower_bound(array_1, 0, len(array_1) - 1, 3)) # 2
print(upper_bound(array_1, 0, len(array_1) - 1, 3)) # 2

print('array 2 : 0, 6')
array_2 = [3, 3, 3, 3, 3, 3]

print(lower_bound(array_2, 0, len(array_2), 3)) # 0
print(upper_bound(array_2, 0, len(array_2), 3)) # 6
