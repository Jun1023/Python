# 플로이드 워셜 알고리즘(Floyd-Warshall Algorithm)
# '모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우'에 쓰임
# 점화식 : D[a][b] = min(D[a][b], D[a][k] + D[k][b])

import sys
input = sys.stdin.readline

INF = int(1e9) # 무한을 의미하는 값

# 노드/간선의 개수 입력받기
n = int(input()) # Node
m = int(input()) # Edge

graph = [[INF] * (n + 1) for _ in range(n + 1)] # 2차원 리스트를 만들고, 모든 값 무한으로 초기화

for a in range(1,  n + 1): # 자신 -> 자신으로 가는 비용 0으로 초기화
    for b in range(1, n + 1):
        if a == b:
            graph[a][b] = 0

for _ in range(m): # 각 간선에 대한 정보를 입력받아, 그 값으로 초기화
    a, b, c = map(int, input().split()) # A -> B, 비용 C
    graph[a][b] = c

# 점화식에 따라 플로이드 워셜 알고리즘 수행
for k in range(1, n + 1):
    for a in range(1, n + 1):
        for b in range(1, n + 1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

for a in range(1, n + 1):
    for b in range(1, n + 1):
        if graph[a][b] == INF:
            print("INFINITY", end=' ')
        else:
            print(graph[a][b], end=' ')
    print()

# 시간 복잡도 : O(N^3)
