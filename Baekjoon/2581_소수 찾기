Q.

- 문제
자연수 M과 N이 주어질 때 M이상 N이하의 자연수 중 소수인 것을 모두 골라 이들 소수의 합과 최솟값을 찾는 프로그램을 작성하시오.

예를 들어 M=60, N=100인 경우 60이상 100이하의 자연수 중 소수는 61, 67, 71, 73, 79, 83, 89, 97 총 8개가 있으므로, 이들 소수의 합은 620이고, 최솟값은 61이 된다.

- 입력
입력의 첫째 줄에 M이, 둘째 줄에 N이 주어진다.

M과 N은 10,000이하의 자연수이며, M은 N보다 작거나 같다.

- 출력
M이상 N이하의 자연수 중 소수인 것을 모두 찾아 첫째 줄에 그 합을, 둘째 줄에 그 중 최솟값을 출력한다. 

단, M이상 N이하의 자연수 중 소수가 없을 경우는 첫째 줄에 -1을 출력한다.



A.

[My Code 1]

def prime_num(n): # 소수를 찾는 함수
    for i in range(2, n):
        if n % i == 0: # 딱 떨어지는 수가 있다면 소수가 아님
            return False
    return True # False값이 나오지 않는다면 소수이므로 True

M = int(input())
N = int(input())

prime_list = []

for n in range(M, N + 1):
    if n > 1:
        if prime_num(n):
            prime_list.append(n)
        else:
            pass

if len(prime_list) > 0:
    print(sum(prime_list))
    print(min(prime_list))
else:
    print(-1)
	
	
[My Code 2]

M = int(input())
N = int(input())

prime_list = []

for n in range(M, N + 1):
    false = 0
    if n > 1:
        for i in range(2, n):
            if n % i == 0:
                false += 1

        if false == 0:
            prime_list.append(n)

if len(prime_list) > 0:
    print(sum(prime_list))
    print(min(prime_list))
else:
    print(-1)


* 범위 안의 값에서 소수를 찾아 리스트에 넣고, sum(), min() 함수를 통해 구할 수 있었다.
* 입력 받은 값이 1일 경우 넘어가는 조건문을 넣지 않아서 실패가 계속 떴던 문제다.
