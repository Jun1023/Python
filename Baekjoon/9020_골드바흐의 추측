Q.

- 문제
1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.

골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.

2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.

- 입력
첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.

- 출력
각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다. 출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.


A.

from sys import stdin

def Goldbach():
    prime_check = [False, False] + [True] * 10000 # 소수면 False, 아니라면 True

    for i in range(2, 101): # 2 ~ 101까지 구하고, 이 수의 배수에 속하지 않으면 소수이다.
        if prime_check[i]: # 해당 수가 True라면 -> 소수가 체크가 되지 않았거나, 소수가 아니다
            for j in range(i + i, 10001, i): # 3 이상의 수부터 배수인 수를 체크
                prime_check[j] = False

    T = int(stdin.readline()) # 케이스 입력받기

    for _ in range(T):
        n = int(stdin.readline())

        A = n // 2 # A의 반부터 체크
        B = A # A와 같음

        for _ in range(10000): # 10000개 체크하여
            if prime_check[A] and prime_check[B]: # A와 B가 모두 소수라면?
                print(A, B) # 출력
                break
            A -= 1 # 두 수가 소수가 아니라면 A는 1을 빼주고
            B += 1 # B는 1을 더해준다.

Goldbach()


* 소수를 구하는 방법은 알고 있지만.. 각 조합을 어떻게 구해야할지 헷갈렸던 문제이다.
