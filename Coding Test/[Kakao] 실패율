Q.

 슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 
원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.
 이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 
 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다. 
 오렐리를 위해 실패율을 구하는 코드를 완성하라.

- 실패율은 다음과 같이 정의한다.
 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 
실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

- 제한사항
 스테이지의 개수 N은 1 이상 500 이하의 자연수이다.
 stages의 길이는 1 이상 200,000 이하이다.
 stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.
 각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
 단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
 만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.


- 입출력 예
N	stages	result
5	[2, 1, 2, 6, 2, 4, 3, 3]	[3,4,2,1,5]
4	[4,4,4,4,4]	[4,1,2,3]


- 입출력 예 설명
입출력 예 #1
1번 스테이지에는 총 8명의 사용자가 도전했으며, 이 중 1명의 사용자가 아직 클리어하지 못했다. 따라서 1번 스테이지의 실패율은 다음과 같다.

1 번 스테이지 실패율 : 1/8
2번 스테이지에는 총 7명의 사용자가 도전했으며, 이 중 3명의 사용자가 아직 클리어하지 못했다. 따라서 2번 스테이지의 실패율은 다음과 같다.

2 번 스테이지 실패율 : 3/7
마찬가지로 나머지 스테이지의 실패율은 다음과 같다.

3 번 스테이지 실패율 : 2/4
4번 스테이지 실패율 : 1/2
5번 스테이지 실패율 : 0/1
각 스테이지의 번호를 실패율의 내림차순으로 정렬하면 다음과 같다.

[3,4,2,1,5]
입출력 예 #2

모든 사용자가 마지막 스테이지에 있으므로 4번 스테이지의 실패율은 1이며 나머지 스테이지의 실패율은 0이다.

[4,1,2,3]



[My Code_1]

def solution(N, stages):
    fail = []
    answer = []
    stage_list = []  # 각 스테이지별 인원
    zero_list = []
    cnt = 0

    if max(stages) == N + 1:
        for i in range(1, len(stages) - 1):  # stage_list 정리
            stage_list.append(stages.count(i))
    else:
        for i in range(1, len(stages)):  # stage_list 정리
            stage_list.append(stages.count(i))

    all_player = sum(stage_list)

    for s in stage_list:
        if all_player <= 0:
            all_player += 1

        if cnt == 0:
            fail.append(stage_list[0] / all_player)
            cnt += 1

        elif cnt == N:
            pass

        elif s == 0:
            fail.append(0)
            cnt += 1

        else:
            fail.append(s / (all_player - stage_list[cnt - 1]))
            all_player -= stage_list[cnt - 1]
            cnt += 1

    if fail.count(0) != 0:
        for i in range(len(fail)):
            if fail[i] == 0:
                zero_list.append(i+1)

    while sum(fail) != 0:
        answer.append(fail.index(max(fail))+1)
        max_fail_value = fail.index(max(fail))
        fail[max_fail_value] = 0

    answer += zero_list

    return answer


N = int(input())
stages = list(map(int, input().split()))

print(solution(N, stages))

* 내가 리스트로 코드를 짰을 때, 성공하긴 했지만, 많은 케이스가 시간 초과가 났다. 


[My Code_2]

# 스테이지와 스테이지별 실패율을 tuple로 묶어서 실패율을 기준으로 정렬을 해줌으로써 문제를 해결할 수 있었다.

def solution(N, stages):
    answer = []
    stage_fail = [] # (stage, 실패율)이 들어갈 리스트
    i = 0 # 스테이지별 실패율을 계산하는데 반복문 count

    total = len(stages)  # 전체 인원

    users = [0 for _ in range(N + 1)] # 스테이지별 수로 list를 0으로 초기화

    for stage in stages: # 스테이지별 인원 체크
        users[stage - 1] += 1

    # 실패율 계산해서 각 스테이지별 실패율 [스테이지, 실패율] 리스트 생성
    for user in range(N):
        if users[i] == 0: # 인원이 0명이라면 
            stage_fail.append(((i + 1), 0))
            i += 1
        else: # 인원이 0명이 아니라면
            stage_fail.append((i + 1, (users[i] / total)))
            total -= users[i]
            i += 1

    # stage_fail list에 (스테이지, 실패율)이 각각 들어갔다.
    # 그럼 실패율을 기준으로 sort 해준다.

    stage_fail = sorted(stage_fail, key=lambda stage_fail: stage_fail[1], reverse=True) # 모든 값의 index[1]에 실패율이 있으니, 실패율을 기준으로 내림차순 정렬

    for i in range(N): # 정답을 출력할 리스트에 실패율로 내림차순 정렬된 리스트의 index[0](스테이지) 를 넣음
        answer.append(stage_fail[i][0])

    return answer
