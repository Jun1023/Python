# 위상 정렬(Topology Sort) : 방향 그래프의 모든 노드를 '방향성에 거스르지 않도록 순서대로 나열'
# 진입차수(Indegree) : 특정한 노드로 '들어오는' 간선의 개수

""" 과정
1) 진입차수가 0인 노드를 큐에 넣는다.
2) 큐가 빌 때까지 이 과정을 반복한다.
    1. 큐에서 원소를 꺼내 해당 노드에서 출발하는 간선을 그래프에서 제거한다.
    2. 새롭게 진입차수가 0이 딘 노드를 큐에 넣는다.
"""

from collections import deque
import sys
input = sys.stdin.readline

v, e = map(int, input().split()) # 노드와 간선의 갯수 입력받기
indegree = [0] * (v + 1) # 모든 노드에 대한 진입차수 0으로 초기화
graph = [[] for i in range(v + 1)]  # 각 노드에 연결된 간선 정보를 담기 위한 연결 리스트 초기화

for _ in range(e):
    a, b = map(int, input().split())
    graph[a].append(b) # A -> B
    indegree[b] += 1

def topology_sort(): # 위상 정렬 함수
    result = [] # 알고리즘 수행 결과를 담을 리스트
    q = deque()

    for i in range(1, v + 1): # 처음 시작시 진입차수가 0인 노드를 큐에 삽입
        if indegree[i] == 0:
            q.append(i)

    while q:
        now = q.popleft()
        result.append(now)
        for i in graph[now]: # 해당 원소와 연결된 노드들의 진입차수에서 1 빼기
            indegree[i] -= 1
            if indegree[i] == 0: # 새롭게 진입차수가 0이 되는 노드를 큐에 삽입
                q.append(i)

    for i in result:
        print(i, end=' ')

topology_sort()

# 시간 복잡도 O(V + E), 차례대로 모든 노드를 확인하면서, 해당 노드에서 출발하는 간선을 차례대로 제거해야 함
