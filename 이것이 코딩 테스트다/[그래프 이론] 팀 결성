Q. 
  
  서로소 집합을 활용해 사이클을 판별하는 알고리즘을 조금 수정하면 해결할 수 있는 문제이다.

  [Input Condition]
  1. 첫째 줄에서 N, M이 주어진다. M은 입력으로 주어지는 연산의 개수이다. ( 1 <= N, M <= 100,000 )
  2. 다음 M개의 줄에는 각각의 연산이 주어진다.
  3. '팀 합치기' 연산은 0 a b 형태로 주어진다. 이는 a번 학생이 속한 팀과 b번 학생이 속한 팀을 합친다는 의미이다.
  4. '같은 팀 여부 확인' 연산은 1 a b 형태로 주어진다. 이는 a번 학생과 b번 학생이 같은 팀에 속해 있는 지를 확인하는 연산이다.
  5. a와 b는 N 이하의 양의 정수이다.
  
  [Output Condition]
  1. '같은 팀 여부 확인' 연산에 대하여 한 줄에 하나씩 YES 혹은 NO로 결과를 출력한다.
    
  [Input]
  7 8
  0 1 3
  1 1 7
  0 7 6
  1 7 1
  0 3 7
  0 4 2
  0 1 1
  1 1 1

  [Output]
  NO
  NO
  YES
   
  [Code]

  import sys
  input = sys.stdin.readline

  def find_parent(parent, x):
      if parent[x] != x:
          parent[x] = find_parent(parent, parent[x])
      return parent[x]

  def union_parent(parent, a, b):
      a = find_parent(parent, a)
      b = find_parent(parent, b)
      if a < b:
          parent[b] = a
      else:
          parent[a] = b

  n, m = map(int, input().split())
  parent = [0] * (n + 1)


  for i in range(0, n + 1):
      parent[i] = i

  for i in range(m):
      op, x, y = map(int, input().split())
      if op == 0:
          union_parent(parent, x, y)
      else: # op == 1:
          if find_parent(parent, x) == find_parent(parent, y):
              print("Yes")
          else:
              print("No")
