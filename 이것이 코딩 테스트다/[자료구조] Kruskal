# 크루스칼 알고리즘

# 신장 트리 : 하나의 그래프가 있을 때 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프

# 최소 신장 트리 알고리즘의 대표적인 예가 크루스칼 알고리즘이다.

def find_parent(parent,x): # 특정 원소가 속한 집합을 찾기
    if parent[x] != x: # 루트 노드 아니면 루트 노드 찾기
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b=  find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

v, e = map(int, input().split()) # 노드, 간선 개숫 입력받기
parent = [0] * (v + 1)

edges = []
result = 0

for i in range(1, v + 1):
    parent[i] = i

for _ in range(e):
    a, b, cost = map(int, input().split())
    edges.append((cost, a, b)) # 비용 순으로 정렳기 위해서 튜플의 첫 번째 원소를 비용으로 설정

edges.sort() # 간선을 비용 순으로 정렬
for edge in edges:
    cost, a, b = edge
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent, a, b)
        result += cost

print(result) # 모든 노드를 최소한의 비용으로 연결한 비용

# 간선의 갯수가 E, O(E log E)
