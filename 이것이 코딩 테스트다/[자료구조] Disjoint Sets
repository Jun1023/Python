# 서로소 집합(Disjoint Sets = union find) : 공통 원소가 없는 두 집합 찾기
# 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조
# 루트를 찾기 위해서는 재귀적으로 부모를 거슬러 올라가야 한다.

# 연산 과정
1) union(합집합) 연산을 확인하여, 서로 연결된 두 노드 A, B를 확인
  1. A와 B의 루트 노드 A`, B`를 각각 찾음
  2. A`를 B`의 부모 노드로 설정( B` -> A` )
2) 모든 union 연산을 처리할 때까지 1번 과정 반복

def find_parent(parent, x): # 특정 원소가속한 집합을 찾기
    # 루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
    if parent[x] != x:
        return find_parent(parent, parent[x])
    return x

def union_parent(parent, a, b): # 두 원소가 속한 집합을 합치기
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

v, e = map(int, input().split()) # 노드의 개수와 간선(union 연산)의 개수 입력받기
parent = [0] * (v + 1) # 부모 테이블 초기화

for i in range(1, v + 1): # 부모 테이블상에서, 부모를 자기 자신으로 초기화
    parent[i] = i

for i in range(e): # union 연산을 각각 수행
    a, b = map(int, input().split())
    union_parent(parent, a, b)

print('각 원소가 속한 집합: ', end='') # 각 원소가 속한 집합 출력
for i in range(1, v + 1):
    print(find_parent(parent, i), end=' ')

print()

# 부모 테이블 내용 출력
print('부모 테이블: ', end='')
for i in range(1, v + 1):
    print(parent[i], end=' ')
