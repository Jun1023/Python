Q. 
  
   방향 전환을 하며 갈 수 있는 길을 확인하고, 갈 수 있는 길이 없을 때까지 이동하는 문제이다.
  
   입력 조건
    1. 첫째 줄에 맵의 세로 크기 N과 가로 크기 M을 공배긍로 구분하여 입력한다. (3 <= N, M <= 50)
    2. 둘째 줄에 게임 캐릭터가 있는 칸의 좌표 (A, B)와 바라보는 방향 d가 각각 서로 공백으로 구분하여 주어진다. 방향 d의 값으로는 다음과 같이 4가지가 존재한다.
    - 0 : 북쪽
    - 1 : 동쪽
    - 2 : 남쪽
    - 3 : 서쪽
    3. 셋째 줄부터 맵이 육지인지 바다인지에 대한 정보가 주어진다. N개의 줄에 맵의 상태가 북쪽부터 남쪽 순서대로, 각 줄의 데이터는 서쪽으로부터 동쪽 순서대로 주어진다. 맵의 외곽은 항상 바다로 되어 있다.
   - 0 : 육지
   - 1 : 바다
   처음에 게임 캐릭터가 위치한 칸의 상태는 항상 육지이다.
   
   출력 조건
    1. 첫째 줄에 이동을 마친 후 캐릭터가 방문한 칸의 수를 출력한다.
    
   입력)
   
   4 4        # 4 X 4 맵 생성
   1 1 0      # (1, 1)에 북쪽(0)을 바라보고 서 있는 캐릭터
   1 1 1 1    # 첫 줄은 모두 바다
   1 0 0 1    # 둘째 줄은 바다/육지/바다/육지
   1 1 0 1    # 셋째 줄은 바다/바다/육지/바다
   1 1 1 1    # 넷째 줄은 모두 바다
   
   출력)
   
   3    # 3 칸 이동
   
[풀이]
 
 왼쪽으로 이동하는 함수를 만든다.
 N X M 배열을 만들어준다.(이동한적 있는지 체크하기 위함)
 N X M 배열을 만들어준다.(블럭이 육지인지 바다인지 제작)
 
 왼족으로 방향을 전환하고 앞으로 갈 수 있는지 체크
  > 있다면 이동
  > 없다면 다시 방향 전환
 
 4 방향 모두 갈 수 없다면 뒤로 1칸 이동
 뒤로 못간다면 시뮬레이션 종료 후 몇칸 이동했는지 출력
 
 
 
[Book Code]

n, m = map(int, input().split()) # Map 크기

# 방문한 위치를 저장하기 위해 맵을 생성하여 0으로 초기화
d = [[0] * m for _ in range(n)] # n x m 다차원 배열 생성
# 현재 캐릭터의 X, Y좌표, 방향 입력받기
x, y, direction = map(int, input().split())

d[x][y] = 1 # 현재 좌표 방문 처리

# 전체 맵 정보를 입력받기
array = []
for i in range(n):
    array.append(list(map(int, input().split())))  # 산인지 육지인지 입력받기

# 복, 동, 남, 서 방향 정의
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 왼쪽으로 회전
def turn_left():
    global direction # direction이 함수 바깥에서 선언된 전역변수이기 때문에 global을 사용해준다.
    direction -= 1 # 왼쪽으로 회전했는데
    if direction == -1: # -1이다 -> 북쪽이다
        direction = 3 # +3을 해줘서 북 => 서로 바꿔준다.

# 시뮬레이션 시작
count = 1
turn_time = 0
while True:
    turn_left() # 왼쪽으로 회전
    nx = x + dx[direction]
    ny = y + dy[direction]

    # 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동
    if d[nx][ny] == 0 and array[nx][ny] == 0: #  앞의 조건은 가본적이 있는지 확인 / 뒤의 조건은 플레이어가 갈 수 있는지 확인
        d[nx][ny] = 1 # 해당 칸은 플레이어가 왔다간 칸이므로 1로 바꿔준다.
        # 실제 플레이어를 해당 칸으로 이동
        x = nx
        y = ny
        count += 1 # 이동한 칸 + 1
        turn_time = 0 # 방향 전환 횟수 초기화
        continue
    # 회전한 이후 정면에 가보지 않은 칸이 없거나 바다인 경우
    else:
        turn_time += 1 # 회전한 횟수 + 1

    # 네 방향 모두 갈 수 없는 경우
    if turn_time == 4:
        nx = x - dx[direction]
        ny = y - dy[direction]

        #뒤로 갈 수 있다면 이동하기
        if array[nx][ny] == 0:
            x = nx
            y = ny

        # 뒤가 바다로 막혀있는 경우
        else:
            break
        turn_time = 0

print(count)



* 어떻게 풀지 이해까지는 했으나 구현하지 못했다.
* 책을 클론코딩하며 구현을 어떻게 해야할지 이해했으며 다음날 다시 풀어 본다.
