DFS(Depth-First Search), 깊이 우선 탐색 : Graph에서 깊은 부분을 우선적으로 탐색하는 알고리즘


DFS, Stack을 이용해 방문 처리를 한다.
1) 탐색 노드를 stack에 삽입하고 방문 처리를 함
2) stack의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 stack에 넣고 방문 처리, 방문하지 않은 인접 노드가 없으면 stack에서 최상단 노드를 꺼냄
3) 2번의 과정을 더 이상 수행할 수 없을 때까지 반복


* 일반적으로 인접한 노드 중에서 방문하지 않은 노드가 여러 개 있으면 번호가 낮은 순서부터 처리함


[Code]

# 재귀 함수로 DFS 구현

def DFS(graph, v, visited):
    visited[v] = True # 현재 노드를 방문 처리
    print(' -> ', v, end ='')

    for i in graph[v]: # 그래프[v]에 있는 리스트가 하나씩 i로 들어감
        if not visited[i]: # 현재 노드가 방문 했다면 'True', 방문하지 않았다면 'False' => not True -> False, not False -> True
                           # 현재 노드가 방문하지 않았다면 i를 v로 하여 재귀함수 호출
            DFS(graph, i, visited)

# 각 노드가 연결된 정보를 list 자료형으로 표현(2차원 List)

graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 list)
visited = [False] * 9

DFS(graph, 1, visited)

[Result]

12768345
