Q.

회전, 이동 가능
자물쇠 영역내에서 열쇠의 돌기 부분과 자물쇠의 홈 부분이 정확히 일치해야 한다.
열쇠의 돌기와 자물쇠의 홈 부분이 정확히 일치해야 하며 열쇠의 돌기와 자물쇠의 돌기가 만나서는 안된다.
자물소의 모든 홈을 채워 비어있는 곳이 없어야 자물쇠를 열 수 있다.


A.

def rotate_90_degree(a):
    n = len(a)
    m = len(a[0])
    result = [[0] * n for _ in range(m)] # 결과 리스트 생성
    for i in range(n): # 행
        for j in range(m): # 열
            result[j][n - i - 1] = a[i][j] # 회전
    return result

def check(new_lock): # 자물쇠 중간 부분이 모두 1인지 체크
    lock_length = len(new_lock) // 3
    for i in range(lock_length, lock_length * 2):
        for j in range(lock_length, lock_length * 2):
            if new_lock[i][j] != 1: # 하나라도 1이 아니라면? 일치하지 않다
                return False
    return True

def solution(key, lock):
    n = len(lock)
    m = len(key)

    new_lock = [[0] * (n * 3) for _ in range(n * 3)] # 자물쇠의 크기 기존의 3배]

    for i in range(n): # 새로운 자물쇠의 중앙 부분에 기존 자물쇠 넣기
        for j in range(n):
            new_lock[i + n][j + n] = lock[i][j]

    for rotation in range(4):
        key = rotate_90_degree(key) # 열쇠 회전
        for x in range(n * 2):
            for y in range(n * 2):
                for i in range(m): #자물쇠에 열쇠 끼워 넣기
                    for j in range(m):
                        new_lock[x + i][y + j] += key[i][j]
                if check(new_lock) == True:
                    return True
                for i in range(m):
                    for j in range(m):
                        new_lock[x + i][y + j] -= key[i][j]

    return False
    
# 해결하지 못하여 답을 보고 풀이했다.
# 다시 풀어보며 문제를 정확히 해결해볼 필요가 있다.
