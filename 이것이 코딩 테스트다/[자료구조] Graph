# Graph : Node와 Edge로 표현됨. Node == Vertex
# 두 Note가 Edge로 연결되어 있다면 '두 노드는 인접하다'라고 표현한다.


# 인접 행렬(Adjacency Martrix) 방식 : 2차원 배열에 각 노드가 연결된 형태를 기록하는 방식.
# 연결이 되지 않은 노드끼리는 무한(Infinity)의 비용이라고 작성

# 인접 행렬 방식

INF = 1e9

# 2차원 리스트를 이용해 인접 행렬 표현
graph = [
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]

print(graph) # [[0, 7, 5], [7, 0, 1000000000.0], [5, 1000000000.0, 0]]


# ========================================================================================= #


# 인접 리스트(Adjacency List) 방식 : 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장
# Python으로 인접 리스트를 이용해 그래프를 표현하고자 할 때에도 단ㅅ히 2차원 리스트를 이용하면 된다

# 인접 리스트 방식

graph = [[] for _ in range(3)] # 행이 3개인 2차원 리스트로 인접 리스트 표현

# 노드 0에 연결된 노드 정보 저장(노드, 거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

# 노드 1에 연결된 노드 정보 저장(노드, 거리)
graph[1].append((0, 7))

# 노드 2에 연결된 노드 정보 저장(노드, 거리)
graph[2].append((0, 5))

print(graph) # [[(1, 7), (2, 5)], [(0, 7)], [(0, 5)]]



# 인접 행렬 방식은 모든 관계를 저장하므로 노드 개수가 많을수록 메모리가 불필요하게 낭비된다.
# but. 인접 리스트 방식은 연결된 정보만을 저장하기 때문에 메모리를 효율적으로 사용한다.
# => 이와 같은 속성 때문에 인접 리스트 방식은 인접 행렬 방식에 비해 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느리다. 
# why? 인접 리스트 방식에서는 연결된 데이터를 하나씩 확인해야 하기 때문이다.

# 특정한 노드와 연결된 모든 인접 노드를 순회해야 하는 경우, 인접 리스트 방식이 인접 행렬 방식에 비해 메모리 공간의 낭비가 적다.
