Q. 
  
  이진 탐색을 활용하여 남은 길이를 구하면 된다.

  [Input Condition]
  1. 첫째 줄에 떡의 개수 N과 요청한 떡의 길이 M이 주어진다. (1 <= N <= 1,000,000, 1 <= M <= 2,000,000,000)
  2. 둘째 줄에는 떡의 개별 높이가 주어진다. 떡 높이의 총합은 항상 M 이상이므로, 손님은 필요한 양만큼 떡을 사갈 수 있다. 높이는 10억보다 작거나 같은 양의 정수 또는 0이다.

  [Output Condition]
  1. 적어도 M만큼의 떡을 집에 가져가기 위해 절단기에 설정할 수 있는 높이의 최댓값을 출력한다.
    
  [Input]
  4 6
  19 15 10 17

  [Output]
  15
   
  [Code]

  from sys import stdin

  # 재귀 함수로 문제

  def binary_search(array, target, start, end):
      mid = (start + end) // 2

      if start >= end:
          return -1
      if array[mid] == target:
          return target
      elif array[mid] < target:
          return binary_search(array, target, mid + 1, end)
      else:
          return binary_search(array, target, start, mid - 1)


  store_num = int(stdin.readline())
  store_list = sorted(list(map(int, stdin.readline().split())))
  user_num = int(stdin.readline())
  user_list = sorted(list(map(int, stdin.readline().split())))

  for item in user_list:
      if binary_search(store_list, item, 0, len(store_list)):
          print("yes", end=' ')
      else:
          print('no', end=' ')


  # 반복문으로 문제 해결


  store_num = int(stdin.readline())
  store_list = sorted(list(map(int, stdin.readline().split())))
  user_num = int(stdin.readline())
  user_list = sorted(list(map(int, stdin.readline().split())))

  for item in user_list:
      start = 0
      end = len(store_list)

      while True:
          mid = (start + end) // 2
          if start >= end:
              print('false')
              break
          if store_list[mid] == item:
              print('True')
              break
          elif store_list[mid] < item:
              start = mid + 1
          else:
              end = mid - 1

   
* 재귀 함수와 반복문으로 해결할 수 있어서 둘다 구현했다.
