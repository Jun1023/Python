Q. 
  
  상, 하, 좌, 우를 체크해서 최단 목표 지점까지 최단 거리를 구하는 문제이다. Queue를 사용하는 BFS를 사용했다.

  [Input Condition]
  1. 첫째 줄에 두 정수 N, M(4 <= N, M <= 200)이 주어집니다. 다음 N개의 줄에는 각각 M개의 저웃(0 or 1)로 미로의 정보가 주어진다. 각각의 수들은 공백 없이 붙어서 입력된다.
     각각의 수들은 공백 업ㅈㅅ이 붙어서 입력으로 제시된다. 또한 시작 칸과 마지막 칸은 항상 1이다.

  [Output Condition]
  1. 첫째 줄에 최소 이동 칸의 개수를 출력한다.
    
  [Input]
  5 6
  101010
  111111
  000001
  111111
  111111


  [Output]
  10
   
  [풀이]

   시작 지점에서 가까운 노드부터 차례로 그래프의 모든 노드를 탐색하는 BFS를 사용해야한다.
   (1, 1) 노드에서 시작해서 BFS를 수행해 모든 노드의 값을 거리 정보로 넣는다.
   특정 노드에 방문하면 그 이전 노드의 거리에 1을 더한 갑을 리스트에 넣는다.
   코드에서 while 반복문의 종료 조건인 queue에 data가 없을 경우, 목표 지점에 도착한 것이므로 종료한다.

  [Book Code]

  from collections import deque

  n, m = map(int, input().split())
  graph = []
  for _ in range(n):
      graph.append(list(map(int, input())))

  # 상, 하, 좌, 우 정의
  dx = [-1, 1, 0, 0]
  dy = [0, 0, -1, 1]

def bfs(x, y):
      queue = deque()
      queue.append((x, y))  # 큐에 x, y를 넣음
      while queue:  # 큐가 빌 때까지 반복
          x, y = queue.popleft()
          for i in range(4):  # 네 방향으로 확인
              nx = x + dx[i]
              ny = y + dy[i]
              print("nx = ", nx)
              print("ny = ", ny)
              if nx < 0 or ny < 0 or nx >= n or ny >= m:  # map을 벗어나면 무시
                  continue
              if graph[nx][ny] == 0:  # 벽이라면 무시
                  continue
              if graph[nx][ny] == 1:  # 해당 노드를 방문하는 경우에만 최단 거리 기록
                  graph[nx][ny] = graph[x][y] + 1
                  queue.append((nx, ny))
      return graph[n - 1][m - 1]

  * 탐색 문제는 어떻게 풀어야할지는 알지만, 정말 코드로 구현하기는 익숙하지 않아 어려운 것 같다. 백준에서 탐색 문제를 많이 풀어봐야 할 것 같다.
  
  [My Code]
  
  from collections import deque
  from sys import stdin

  N, M = map(int, stdin.readline().split())

  graph = []
  for _ in range(N):
      graph.append(list(map(int, input())))

  dx = [-1, 1, 0 ,0]
  dy = [0, 0, -1, 1]

  def BFS(x, y):
      queue = deque()
      queue.append((x, y))

      while queue:
          x, y = queue.popleft()
          for i in range(4):
              nx = x + dx[i]
              ny = y + dy[i]

              if nx < 0 or ny < 0 or nx >= N or ny >= M:
                  continue
              if graph[nx][ny] == 0:
                  continue
              if graph[nx][ny] == 1:
                  graph[nx][ny] = graph[x][y] + 1
                  queue.append((nx, ny))
      return graph[N-1][M-1]

  print(BFS(0, 0))
