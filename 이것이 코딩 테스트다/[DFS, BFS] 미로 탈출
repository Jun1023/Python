Q. 
  
  상, 하, 좌, 우를 체크해서 최단 목표 지점까지 최단 거리를 구하는 문제이다. Queue를 사용하는 BFS를 사용했다.

  [Input Condition]
  1. 첫째 줄에 두 정수 N, M(4 <= N, M <= 200)이 주어집니다. 다음 N개의 줄에는 각각 M개의 저웃(0 or 1)로 미로의 정보가 주어진다. 각각의 수들은 공백 없이 붙어서 입력된다.
     각각의 수들은 공백 업ㅈㅅ이 붙어서 입력으로 제시된다. 또한 시작 칸과 마지막 칸은 항상 1이다.

  [Output Condition]
  1. 첫째 줄에 최소 이동 칸의 개수를 출력한다.
    
  [Input]
  5 6
  101010
  111111
  000001
  111111
  111111


  [Output]
  10
   
  [풀이]

   시작 지점에서 가까운 노드부터 차례로 그래프의 모든 노드를 탐색하는 BFS를 사용해야한다.
   (1, 1) 노드에서 시작해서 BFS를 수행해 모든 노드의 값을 거리 정보로 넣는다.
   특정 노드에 방문하면 그 이전 노드의 거리에 1을 더한 갑을 리스트에 넣는다.
   코드에서 while 반복문의 종료 조건인 queue에 data가 없을 경우, 목표 지점에 도착한 것이므로 종료한다.

  [Book Code]

  from collections import deque

  n, m = map(int, input().split())
  graph = []
  for _ in range(n):
      graph.append(list(map(int, input())))

  # 상, 하, 좌, 우 정의
  dx = [-1, 1, 0, 0]
  dy = [0, 0, -1, 1]

<div class="colorscripter-code" style="color:#f0f0f0;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#272727;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #4f4f4f"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#aaa;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div><div style="line-height:130%">2</div><div style="line-height:130%">3</div><div style="line-height:130%">4</div><div style="line-height:130%">5</div><div style="line-height:130%">6</div><div style="line-height:130%">7</div><div style="line-height:130%">8</div><div style="line-height:130%">9</div><div style="line-height:130%">10</div><div style="line-height:130%">11</div><div style="line-height:130%">12</div><div style="line-height:130%">13</div><div style="line-height:130%">14</div><div style="line-height:130%">15</div><div style="line-height:130%">16</div><div style="line-height:130%">17</div><div style="line-height:130%">18</div><div style="line-height:130%">19</div><div style="line-height:130%">20</div><div style="line-height:130%">21</div><div style="line-height:130%">22</div><div style="line-height:130%">23</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#f0f0f0;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#ff3399">def</span>&nbsp;bfs(x,&nbsp;y):</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;deque()</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.append((x,&nbsp;y))&nbsp;&nbsp;<span style="color:#999999">#&nbsp;큐에&nbsp;x,&nbsp;y를&nbsp;넣음</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#ff3399">while</span>&nbsp;queue:&nbsp;&nbsp;<span style="color:#999999">#&nbsp;큐가&nbsp;빌&nbsp;때까지&nbsp;반복</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x,&nbsp;y&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;queue.popleft()</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#ff3399">for</span>&nbsp;i&nbsp;<span style="color:#ff3399">in</span>&nbsp;<span style="color:#4be6fa">range</span>(<span style="color:#c10aff">4</span>):&nbsp;&nbsp;<span style="color:#999999">#&nbsp;네&nbsp;방향으로&nbsp;확인</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nx&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;x&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">+</span>&nbsp;dx[i]</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ny&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;y&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">+</span>&nbsp;dy[i]</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#4be6fa">print</span>(<span style="color:#ffd500">"nx&nbsp;=&nbsp;"</span>,&nbsp;nx)</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#4be6fa">print</span>(<span style="color:#ffd500">"ny&nbsp;=&nbsp;"</span>,&nbsp;ny)</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#ff3399">if</span>&nbsp;nx&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">&lt;</span>&nbsp;<span style="color:#c10aff">0</span>&nbsp;<span style="color:#ff3399">or</span>&nbsp;ny&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">&lt;</span>&nbsp;<span style="color:#c10aff">0</span>&nbsp;<span style="color:#ff3399">or</span>&nbsp;nx&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">&gt;</span><span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;n&nbsp;<span style="color:#ff3399">or</span>&nbsp;ny&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">&gt;</span><span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;m:&nbsp;&nbsp;<span style="color:#999999">#&nbsp;map을&nbsp;벗어나면&nbsp;무시</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#ff3399">if</span>&nbsp;graph[nx][ny]&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">=</span><span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;<span style="color:#c10aff">0</span>:&nbsp;&nbsp;<span style="color:#999999">#&nbsp;벽이라면&nbsp;무시</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#ff3399">if</span>&nbsp;graph[nx][ny]&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">=</span><span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;<span style="color:#c10aff">1</span>:&nbsp;&nbsp;<span style="color:#999999">#&nbsp;해당&nbsp;노드를&nbsp;방문하는&nbsp;경우에만&nbsp;최단&nbsp;거리&nbsp;기록</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[nx][ny]&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">=</span>&nbsp;graph[x][y]&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">+</span>&nbsp;<span style="color:#c10aff">1</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.append((nx,&nbsp;ny))</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#ff3399">return</span>&nbsp;graph[n&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">-</span>&nbsp;<span style="color:#c10aff">1</span>][m&nbsp;<span style="color:#0086b3"></span><span style="color:#ff3399">-</span>&nbsp;<span style="color:#c10aff">1</span>]</div></div><div style="text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic"><a href="http://colorscripter.com/info#e" target="_blank" style="color:#4f4f4ftext-decoration:none">Colored by Color Scripter</a></div></td><td style="vertical-align:bottom;padding:0 2px 4px 0"><a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white"><span style="font-size:9px;word-break:normal;background-color:#4f4f4f;color:white;border-radius:10px;padding:1px">cs</span></a></td></tr></table></div>


  * 탐색 문제는 어떻게 풀어야할지는 알지만, 정말 코드로 구현하기는 익숙하지 않아 어려운 것 같다. 백준에서 탐색 문제를 많이 풀어봐야 할 것 같다.
  
  [My Code]
  
  from collections import deque
  from sys import stdin

  N, M = map(int, stdin.readline().split())

  graph = []
  for _ in range(N):
      graph.append(list(map(int, input())))

  dx = [-1, 1, 0 ,0]
  dy = [0, 0, -1, 1]

  def BFS(x, y):
      queue = deque()
      queue.append((x, y))

      while queue:
          x, y = queue.popleft()
          for i in range(4):
              nx = x + dx[i]
              ny = y + dy[i]

              if nx < 0 or ny < 0 or nx >= N or ny >= M:
                  continue
              if graph[nx][ny] == 0:
                  continue
              if graph[nx][ny] == 1:
                  graph[nx][ny] = graph[x][y] + 1
                  queue.append((nx, ny))
      return graph[N-1][M-1]

  print(BFS(0, 0))
