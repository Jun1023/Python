BFS(Breadth First Search), 너비 우선 탐색 : 가까운 노드부터 탐색하는 알고리즘


BFS, Queue을 이용해 방문 처리를 한다.
1) 노드를 Queue에 삽입하고 방문 처리
2) Queue에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 함
3) 2번의 과정을 더 이상 수행할 수 없을 때까지 반복


* 일반적으로 인접한 노드 중에서 방문하지 않은 노드가 여러 개 있으면 번호가 낮은 순서부터 처리함

* 실제 수행 시간은 DFS보다 좋은편


[Code]

# BFS 구현

from collections import deque

# BFS method defind
def BFS(graph, start, visited):
    # Queue 구현을 위해 deque Lib 사용
    queue = deque([start])
    visited[start] # 현재 노드를 방문 처리
    while queue: # 큐가 빌 때까지 반복
        v = queue.popleft() # 큐에서 하나의 원소를 뽑아 출력
        print(v, end=' ')
        for i in graph[v]: # 해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
            if not visited[i]:
                queue.append(i)
                visited[i] = True

# 각 노드가 연결된 정보를 list로 표현 (2차원 list)
graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

# 각 노드가 방문된 정보를 list로 표현(1차원 list)
visited = [False] * 9

BFS(graph, 1, visited)

[Result]

1 2 3 8 1 7 4 5 6
