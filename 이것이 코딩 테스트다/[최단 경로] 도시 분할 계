Q. 
  
  크루스칼 알고리즘으로 최소 신장 트리를 찾고, 최소 신장 트리를 구성하는 간선 중 가장 비용이 큰 간선을 제거하면 되는 문제이다.

  [Input Condition]
  1. 첫째 줄에 집의 개수 N, 길의 개수 M이 주어진다. N은 2 이상 100,000 이하인 정수이고, M은 1 이상 1,000,000 이하인 정수이다.
  2. 그다음 줄부터 M줄에 걸쳐 길의 정보가 A, B, C 3개의 정수로 고백으로 구분되어 주어지는데 A번 집과 B번 집을 연결하는 길의 유지비가 C(1 <= C <= 1,000)라는 뜻이다.
  
  [Output Condition]
  1. 첫째 줄에 길을 없애고 남은 유지비 합의 최솟값을 출력한다.
  
  [Input]
  7 12
  1 2 3
  1 3 2
  3 2 1
  2 5 2
  3 4 4
  7 3 6
  5 1 5
  1 6 2
  6 4 1
  6 5 3
  4 5 3
  6 7 4

  [Output]
  8
   
  [Code]

  import sys
  input = sys.stdin.readline

  def find_parent(parent, x):
      if parent[x] != x:
          parent[x] = find_parent(parent, parent[x])
      return parent[x]

  def union_parent(parent, a, b):
      a = find_parent(parent, a)
      b = find_parent(parent, b)
      if a < b:
          parent[b] = a
      else:
          parent[a] = b

  N, M = map(int, input().split()) # 간선
  parent = [0] * (N + 1)

  edges = []
  result = 0

  for i in range(1, N + 1):
      parent[i] = i

  for _ in range(M):
      a, b, cost = map(int, input().split())
      edges.append((cost, a, b))

  edges.sort()
  last_num = 0

  for edge in edges:
      cost, a, b = edge
      if find_parent(parent, a) != find_parent(parent, b):
          union_parent(parent, a, b)
          result += cost
          last_num = cost

  print(result - last_num)
